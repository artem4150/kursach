@page "/create-publication"
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using kursach.Services
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject AuthService AuthService

<h3>Создать публикацию</h3>

@if (isLoading)
{
    <p>Загрузка...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red;">@ErrorMessage</p>
}

<EditForm Model="newPublication" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Заголовок:</label>
        <InputText @bind-Value="newPublication.Title" class="form-control" />
    </div>
    <div class="form-group">
        <label>Описание:</label>
        <InputTextArea @bind-Value="newPublication.Description" class="form-control" />
    </div>
    <div class="form-group">
        <label>Сезон:</label>
        <InputText @bind-Value="newPublication.Season" class="form-control" />
    </div>
    <div class="form-group">
        <label>Стиль:</label>
        <InputText @bind-Value="newPublication.Style" class="form-control" />
    </div>
    <div class="form-group">
        <label>Пол (Gender):</label>
        <InputText @bind-Value="newPublication.Gender" class="form-control" />
    </div>
    <div class="form-group">
        <label>Случай (Occasion):</label>
        <InputText @bind-Value="newPublication.Occasion" class="form-control" />
    </div>
    <div class="form-group">
        <label>Изображения (можно выбрать несколько):</label>
        <InputFile OnChange="HandleFileSelected" multiple />
    </div>
    <button type="submit" class="btn btn-primary">Опубликовать</button>
</EditForm>

@code {
    private NewPublicationDto newPublication = new();
    private List<IBrowserFile> selectedFiles = new();
    private bool isLoading = false;
    private string ErrorMessage;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        ErrorMessage = string.Empty;

        try
        {
            var content = new MultipartFormDataContent();
            content.Add(new StringContent(newPublication.Title ?? string.Empty), "Title");
            content.Add(new StringContent(newPublication.Description ?? string.Empty), "Description");
            content.Add(new StringContent(newPublication.Season ?? string.Empty), "Season");
            content.Add(new StringContent(newPublication.Style ?? string.Empty), "Style");
            content.Add(new StringContent(newPublication.Gender ?? string.Empty), "Gender");
            content.Add(new StringContent(newPublication.Occasion ?? string.Empty), "Occasion");

            if (selectedFiles.Any())
            {
                foreach (var file in selectedFiles)
                {
                    var stream = file.OpenReadStream(10 * 1024 * 1024);
                    var fileContent = new StreamContent(stream);
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                    content.Add(fileContent, "Images", file.Name);
                }
            }

            var client = HttpClientFactory.CreateClient("ApiClient");
            // Получаем токен и устанавливаем заголовок авторизации
            var token = await AuthService.GetTokenAsync();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await client.PostAsync("api/Outfits/create-with-images", content);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/feed");
            }
            else
            {
                ErrorMessage = $"Ошибка: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class NewPublicationDto
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string Season { get; set; }
        public string Style { get; set; }
        public string Gender { get; set; }
        public string Occasion { get; set; }
    }
}
