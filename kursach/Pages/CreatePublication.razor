@page "/create-publication"
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using kursach.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
<Navbar />
<h3>Создать публикацию</h3>

@if (isLoading)
{
    <p>Загрузка...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red;">@ErrorMessage</p>
}

<EditForm Model="newPublication" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Заголовок:</label>
        <InputText @bind-Value="newPublication.Title" class="form-control" />
    </div>
    <div>
        <label>Описание:</label>
        <InputTextArea @bind-Value="newPublication.Description" class="form-control" />
    </div>
    <div>
        <label>Изображение (опционально):</label>
        <InputFile OnChange="HandleFileSelected" />
    </div>
    <button type="submit" class="btn btn-primary">Опубликовать</button>
</EditForm>

@code {
    private NewPublicationDto newPublication = new();
    private IBrowserFile selectedFile;
    private bool isLoading = false;
    private string ErrorMessage;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        ErrorMessage = string.Empty;

        try
        {
            // Формируем MultipartFormDataContent для отправки формы с файлом
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(newPublication.Title ?? string.Empty), "Title");
            content.Add(new StringContent(newPublication.Description ?? string.Empty), "Description");

            if (selectedFile != null)
            {
                // Ограничиваем размер файла (например, 10 МБ)
                var stream = selectedFile.OpenReadStream(10 * 1024 * 1024);
                var fileContent = new StreamContent(stream);
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "ImageFile", selectedFile.Name);
            }

            // Создаем клиента с именем "ApiClient"
            var client = HttpClientFactory.CreateClient("ApiClient");

            // Получаем токен через AuthService
            var token = await AuthService.GetTokenAsync();
            // Добавляем заголовок Authorization
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Отправляем POST-запрос на API для создания публикации с изображением
            var response = await client.PostAsync("api/Outfits/create-with-image", content);
            if (response.IsSuccessStatusCode)
            {
                // После успешного создания переходим на ленту публикаций
                NavigationManager.NavigateTo("/feed");
            }
            else
            {
                ErrorMessage = $"Ошибка: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    

    public class NewPublicationDto
    {
        public string Title { get; set; }
        public string Description { get; set; }
    }
}
