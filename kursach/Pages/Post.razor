@page "/post/{id:int}"
@using kursach.Services
@inject PublicationService PublicationService
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<!-- Шапка сайта -->
<Navbar />

<div class="post-page-container">
    @if (isLoading)
    {
        <p>Загрузка...</p>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color:red;">@ErrorMessage</p>
    }
    else if (post != null)
    {
        <div class="post-details">
            <!-- Левая колонка с изображениями (карусель) -->
            <div class="post-image-section">
                @if (!string.IsNullOrEmpty(post.ImageUrl))
                {
                    var images = post.ImageUrl.Split('|', System.StringSplitOptions.RemoveEmptyEntries);
                    <div class="image-carousel">
                        @foreach (var img in images)
                        {
                            <img src="@img" alt="Изображение публикации" class="carousel-image" />
                        }
                    </div>
                }
            </div>

            <!-- Правая колонка с информацией -->
            <div class="post-info-section">
                <!-- Информация о пользователе -->
                <div class="post-author-info" @onclick="() => GoToUserProfile(post.AuthorId)" style="cursor:pointer;">
                    <img src="@(string.IsNullOrEmpty(post.AuthorAvatar) ? "https://via.placeholder.com/80" : post.AuthorAvatar)" alt="Аватар пользователя" class="user-avatar" />
                    <div class="user-info">
                        <p class="username">@post.AuthorUsername</p>
                        <p class="followers-count">@UserFollowersCount подписчиков</p>
                    </div>
                    <button class="subscribe-btn" @onclick:stopPropagation="true" @onclick="ToggleSubscription">
                        @(isSubscribed ? "Отписаться" : "Подписаться")
                    </button>
                </div>

                <!-- Название и описание поста -->
                <h2 class="post-title">@post.Title</h2>
                <p class="post-description">@post.Description</p>

                <!-- Блок лайков -->
                <div class="like-section">
                    <button class="btn" @onclick="LikePost">Лайк (@post.LikesCount)</button>
                </div>

                <!-- Комментарии -->
                <div class="comments-section">
                    <h4>Комментарии</h4>
                    @if (post.Comments != null && post.Comments.Any())
                    {
                        @foreach (var comment in post.Comments)
                        {
                            <div class="comment-card">
                                <p><strong>@comment.AuthorUsername</strong></p>
                                <p>@comment.Text</p>
                                <p class="comment-meta">@comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p>Пока нет комментариев.</p>
                    }

                    <!-- Форма для нового комментария -->
                    <div class="comment-form">
                        <textarea class="form-control" placeholder="Ваш комментарий" @bind="newCommentText"></textarea>
                        <button class="btn btn-primary" @onclick="SubmitComment">Отправить</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Публикация не найдена.</p>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private PublicationService.PostDto post;
    private bool isLoading = true;
    private string ErrorMessage;

    // Пример количества подписчиков и переменных для комментариев и подписки
    private int UserFollowersCount = 0;
    private string newCommentText = string.Empty;
    private bool isSubscribed = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            post = await LoadSinglePost(Id);
            int currentUserId = await AuthService.GetCurrentUserIdAsync();
            isSubscribed = await PublicationService.IsSubscribedAsync(currentUserId, post.AuthorId);
            UserFollowersCount = await PublicationService.GetFollowersCountAsync(post.AuthorId);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<PublicationService.PostDto> LoadSinglePost(int outfitId)
    {
        // Пример получения поста: здесь получаем все посты и выбираем нужный.
        // Лучше добавить отдельный метод для получения одного поста.
        var allPosts = await PublicationService.GetPostsAsync();
        return allPosts.FirstOrDefault(p => p.OutfitId == outfitId);
    }

    private async Task LikePost()
    {
        try
        {
            var updatedPost = await PublicationService.LikePostAsync(post.OutfitId);
            post = updatedPost;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка при лайке: {ex.Message}";
        }
    }

    private async Task SubmitComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            ErrorMessage = "Введите текст комментария.";
            return;
        }

        try
        {
            var newComment = await PublicationService.SubmitCommentAsync(post.OutfitId, newCommentText);
            if (post.Comments == null)
            {
                post.Comments = new List<PublicationService.CommentDto>();
            }
            post.Comments.Add(newComment);
            newCommentText = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка при отправке комментария: {ex.Message}";
        }
    }

    private async Task ToggleSubscription()
    {
        try
        {
            int currentUserId = await AuthService.GetCurrentUserIdAsync();
            if (!isSubscribed)
            {
                await PublicationService.SubscribeAsync(currentUserId, post.AuthorId);
                isSubscribed = true;
            }
            else
            {
                await PublicationService.UnsubscribeAsync(currentUserId, post.AuthorId);
                isSubscribed = false;
            }
            UserFollowersCount = await PublicationService.GetFollowersCountAsync(post.AuthorId);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка при изменении подписки: {ex.Message}";
        }
    }

    private void GoToUserProfile(int authorId)
    {
        NavigationManager.NavigateTo($"/user/{authorId}");
    }
}

<style>
/* Общие стили */
body, html {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
}

/* Шапка сайта */
.navbar {
    background-color: #f5f5f5;
    border-bottom: 1px solid #ddd;
    padding: 0.5rem 1rem;
    position: sticky;
    top: 0;
    z-index: 100;
    margin-bottom: 1rem;
}

/* Контейнер для шапки */
.navbar-container {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    max-width: 1200px;
    margin: 0 auto;
}

/* Кнопки шапки */
.nav-btn {
    background: none;
    border: none;
    font-size: 1rem;
    margin-right: 1rem;
    cursor: pointer;
    padding: 0.5rem 1rem;
}
.nav-btn:hover {
    background-color: #eaeaea;
}

/* Контейнер страницы */
.post-page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

/* Блок деталей публикации */
.post-details {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}

/* Левая колонка с каруселью изображений */
.post-image-section {
    flex: 1;
    min-width: 300px;
}
.image-carousel {
    overflow-x: auto;
    white-space: nowrap;
}
.carousel-image {
    display: inline-block;
    max-width: 100%;
    height: auto;
    margin-right: 0.5rem;
    border-radius: 4px;
}

/* Правая колонка с информацией о посте */
.post-info-section {
    flex: 1;
    min-width: 300px;
    display: flex;
    flex-direction: column;
}

/* Информация о пользователе */
.post-author-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
}
.user-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
}
.user-info {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}
.username {
    font-weight: bold;
    margin: 0;
}
.followers-count {
    font-size: 0.9rem;
    color: #666;
    margin: 0;
}
.subscribe-btn {
    margin-left: auto;
    background-color: #ccc;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-radius: 4px;
}

/* Название и описание */
.post-title {
    margin: 0 0 0.5rem 0;
}
.post-description {
    margin: 0 0 1rem 0;
}

/* Лайки */
.like-section {
    margin-bottom: 1rem;
}

/* Комментарии */
.comments-section {
    margin-top: 1rem;
}
.comment-card {
    background-color: #f9f9f9;
    border: 1px solid #eee;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    border-radius: 4px;
}
.comment-meta {
    font-size: 0.85rem;
    color: #666;
}

/* Форма комментария */
.comment-form {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 0.5rem;
}
.form-control {
    width: 100%;
    min-height: 60px;
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ddd;
}
.btn {
    background-color: #ccc;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-radius: 4px;
}
.btn:hover {
    background-color: #bbb;
}
</style>
