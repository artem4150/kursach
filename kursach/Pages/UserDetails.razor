@page "/user-info"
@using kursach.Services
@inject AuthService AuthService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h3>Информация о пользователе</h3>

@if (userInfo != null)
{
    <p><strong>Имя пользователя:</strong> @userInfo.Username</p>
    <p><strong>Email:</strong> @userInfo.Email</p>
    <p><strong>Дата регистрации:</strong> @userInfo.CreatedAt.ToString("dd/MM/yyyy")</p>
}
else if (isLoading)
{
    <p>Загрузка...</p>
}
else
{
    <p style="color:red;">@ErrorMessage</p>
}

@code {
    private UserInfoDto userInfo;
    private bool isLoading = true;
    private string ErrorMessage;

    // Когда страница загружается, отправляем запрос на получение данных о пользователе
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await AuthService.SendRequestAsync("api/Users/current-user", HttpMethod.Get);

            if (response.IsSuccessStatusCode)
            {
                userInfo = await response.Content.ReadFromJsonAsync<UserInfoDto>();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("localStorage.clear");

                ErrorMessage = "Ошибка при загрузке данных пользователя.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // DTO модель для получения данных о пользователе
    public class UserInfoDto
    {
        public string Username { get; set; }
        public string Email { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}
