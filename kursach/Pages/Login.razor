@page "/login"
@using kursach.Services
@using System.Net.Http.Json
@using kursach.Services.AuthAPIService

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IHttpClientFactory HttpClientFactory
@inject AuthService AuthService

<div class="login-page">
    <div class="login-card">
        <h3>Авторизация</h3>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <InputText @bind-Value="loginModel.Email" placeholder="Введите email" class="input-field" />
            </div>

            <div class="form-group">
                <InputText @bind-Value="loginModel.Password" type="password" placeholder="Введите пароль" class="input-field" />
            </div>

            <button type="submit" class="login-btn">Войти</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var loginRequest = new { Email = loginModel.Email, Password = loginModel.Password };
        var client = HttpClientFactory.CreateClient("ApiClient");

        try
        {
            var response = await client.PostAsJsonAsync("api/auth/Auth/login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    await AuthService.SaveTokenAsync(result.Token);
                    NavigationManager.NavigateTo("/user-info");
                }
                else
                {
                    errorMessage = "Ошибка: не получен токен.";
                }
            }
            else
            {
                errorMessage = "Ошибка авторизации.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }

    public class ErrorResponse
    {
        public string Message { get; set; }
    }
}

<style>
    /* Убираем отступы и задаём шрифт */
    body, html {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
        height: 100%;
    }

    /* Фон страницы */
    .login-page {
        /* Путь к вашей картинке */
        background: url("images/Frame3.png") no-repeat center center fixed;
        background-size: cover;
        /* Выравниваем содержимое по центру */
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Заполняем весь экран */
    }

    /* Карточка логина */
    .login-card {
        background-color: rgba(255, 255, 255, 0.9);
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        width: 300px;
        text-align: center;
    }

        /* Заголовок */
        .login-card h3 {
            margin-top: 0;
            margin-bottom: 1rem;
        }

    /* Поля ввода */
    .input-field {
        width: 100%;
        padding: 0.5rem;
        margin-bottom: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    /* Кнопка входа */
    .login-btn {
        width: 100%;
        padding: 0.5rem;
        border: none;
        border-radius: 4px;
        background-color: #333;
        color: #fff;
        font-size: 1rem;
        cursor: pointer;
    }

        .login-btn:hover {
            background-color: #555;
        }

    /* Сообщение об ошибке */
    .error-message {
        color: red;
        margin-top: 1rem;
        font-size: 0.9rem;
    }
</style>
